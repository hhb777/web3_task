package main

import (
	"fmt"
)



//指针数值加十
//编写一个Go程序，定义一个函数，该函数接收一个整数指针作为参数，在函数内部将该指针指向的值增加10，然后在主函数中调用该函数并输出修改后的值。
func addnum(num *int) {
	*num += 10
}

func main() {
	num := 1
	fmt.Println("old num:", num)
	addnum(&num)
	fmt.Println("new num:", num)
}

//切片指针乘2
//实现一个函数，接收一个整数切片的指针，将切片中的每个元素乘以2。
func selicesin(selices []int) {
	for i := 0; i < len(selices); i++ {
		selices[i] *= 2
	}
}

func main() {

	//selices pointer
	selices := []int{1, 2, 3, 4, 5, 6}
	fmt.Println("old selice:", selices)
	selicesin(selices)
	fmt.Println("new selice:", selices)
}

//goroutine 奇偶打印
//编写一个程序，使用 go 关键字启动两个协程，一个协程打印从1到10的奇数，另一个协程打印从2到10的偶数。
func main() {
	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
		defer wg.Done()
		for i := 1; i <= 10; i++ {
			if i%2 != 0 {
				fmt.Println("jnum:", i)
			}
		}
	}()
	go func() {
		defer wg.Done()
		for i := 1; i <= 10; i++ {
			if i%2 == 0 {
				fmt.Println("onum:", i)
			}
		}
	}()
	wg.Wait()
}


//goroutine scheduler
//设计一个任务调度器，接收一组任务（可以用函数表示），并使用协程并发执行这些任务，同时统计每个任务的执行时间。
func mysche(i int, wg *sync.WaitGroup) {
	defer wg.Done()
	start := time.Now()
	fmt.Println("i=", i)
	time.Sleep(1 * time.Second)
	fmt.Println(time.Since(start))
}

func main() {
	var wg sync.WaitGroup
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go mysche(i, &wg)
	}
	wg.Wait()
}

// 对象使用
//interface多态使用
//定义一个 Shape 接口，包含 Area() 和 Perimeter() 两个方法。然后创建 Rectangle 和 Circle 结构体，实现 Shape 接口。在主函数中，创建这两个结构体的实例，并调用它们的 Area() 和 Perimeter() 方法。
type Shape interface {
	Area()
	Perimeter()
}

type Rectangle struct {
}

func (r Rectangle) Area() {
	fmt.Println("Rectangle Area of rectangle")
}

func (r Rectangle) Perimeter() {
	fmt.Println("Rectangle Perimeter of rectangle")
}

type Circle struct {
}

func (c Circle) Area() {
	fmt.Println("Circle Area of circle")
}
func (c Circle) Perimeter() {
	fmt.Println("Circle Perimeter of circle")
}

func test(s Shape) {
	s.Area()
	s.Perimeter()
}

func main() {
	re := Rectangle{}
	c := Circle{}
	test(re)
	test(c)
}


//对象继承使用
//使用组合的方式创建一个 Person 结构体，包含 Name 和 Age 字段，再创建一个 Employee 结构体，组合 Person 结构体并添加 EmployeeID 字段。为 Employee 结构体实现一个 PrintInfo() 方法，输出员工的信息。
type Person struct {
	Name string
	Age  int
}

type Employee struct {
	Person
	EmployeeID int
}

func (e *Employee) PrintInfo() {
	fmt.Println("EmployeeID:", e.EmployeeID)
	fmt.Println("Name:", e.Name)
	fmt.Println("Age:", e.Age)
}

func main() {
	person := Employee{Person{"huang", 18}, 123}
	person.PrintInfo()
}



// channel通信
//编写一个程序，使用通道实现两个协程之间的通信。一个协程生成从1到10的整数，并将这些整数发送到通道中，另一个协程从通道中接收这些整数并打印出来。
func sendtest(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 1; i <= 10; i++ {
		ch <- i
	}
	close(ch)
}

func recvtest(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 1; i <= 10; i++ {
		select {
		case v := <-ch:
			fmt.Println(v)
		}
	}
}

func main() {
	ch := make(chan int)
	var wg sync.WaitGroup
	wg.Add(2)
	go sendtest(ch, &wg)
	go recvtest(ch, &wg)
	wg.Wait()
}



//有缓存channel，读取的时候不会阻塞
//实现一个带有缓冲的通道，生产者协程向通道中发送100个整数，消费者协程从通道中接收这些整数并打印。
func sendtest(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 1; i <= 100; i++ {
		ch <- i
	}
	close(ch)
}

func recvtest(ch chan int, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 1; i <= 100; i++ {
		select {
		case v := <-ch:
			fmt.Println(v)
		}
	}
}

func main() {
	ch := make(chan int, 100)
	var wg sync.WaitGroup
	wg.Add(2)
	go sendtest(ch, &wg)
	go recvtest(ch, &wg)
	wg.Wait()
}


//互斥锁使用,没加锁前最后count打印数值随机，加锁后count打印数值为1000
//编写一个程序，使用 sync.Mutex 来保护一个共享的计数器。启动10个协程，每个协程对计数器进行1000次递增操作，最后输出计数器的值。
func counter(count *int, wg *sync.WaitGroup, lock *sync.Mutex) {
	defer wg.Done()
	for i := 1; i <= 1000; i++ {
		lock.Lock()
		*count++
		lock.Unlock()
	}
}

func main() {
	var wg sync.WaitGroup
	count := 0
	lock := sync.Mutex{}
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go counter(&count, &wg, &lock)
	}

	wg.Wait()
	fmt.Println(count)
}


//原子性操作
//使用原子操作（ sync/atomic 包）实现一个无锁的计数器。启动10个协程，每个协程对计数器进行1000次递增操作，最后输出计数器的值。
func counter(count *int64, wg *sync.WaitGroup) {
	defer wg.Done()
	for i := 1; i <= 1000; i++ {
		atomic.AddInt64(count, 1)
	}
}

func main() {
	var wg sync.WaitGroup
	var count int64 = 0
	for i := 0; i < 10; i++ {
		wg.Add(1)
		go counter(&count, &wg)
	}

	wg.Wait()
	fmt.Println(count)
}
